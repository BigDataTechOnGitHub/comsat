sourceSets {
    jdk7 {
        java {
            srcDir 'src/main/java'
        }
            
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    jdk8 {
        java {
            srcDir 'src/main/java'
        }
            
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

compileJdk7Java {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'
}

compileJdk8Java {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

dependencies {
    jdk7Compile "co.paralleluniverse:quasar-core:$quasarVer"
    jdk8Compile "co.paralleluniverse:quasar-core:$quasarVer:jdk8"

    provided "org.apache.tomcat:tomcat-juli:$tomcatVer"
    provided "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVer"

    testCompile (project(':comsat-test-utils')) {
        exclude group: 'org.eclipse.jetty.websocket', module: '*'         
    }

    testRuntime project(':comsat-jdbc')
}

def ssets = [sourceSets.jdk7]
if(ext.java8) {
    ssets += sourceSets.jdk8
}
ssets.each { set ->
    def jarTask = task("${set.name}Jar", type: Jar) {
        from { project.configurations["${set.name}Runtime"].collect { it.isDirectory() ? it : zipTree(it) } }
    } 

    artifacts {
        archives jarTask
    }

    assemble.dependsOn jarTask
}

if (ext.java8) {
    jdk8Jar {
        classifier = 'jdk8'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task deployWar(type: Copy) {
    evaluationDependsOn ":comsat-test-war"
    into "build/wars"
    from project(":comsat-test-war").war
}

tasks.withType(Test) {
    dependsOn deployWar
}
