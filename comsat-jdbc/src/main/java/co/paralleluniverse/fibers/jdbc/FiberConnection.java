/*
 * COMSAT
 * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
 *
 * This program and the accompanying materials are dual-licensed under
 * either the terms of the Eclipse Public License v1.0 as published by
 * the Eclipse Foundation
 *
 *   or (per the licensee's choosing)
 *
 * under the terms of the GNU Lesser General Public License version 3.0
 * as published by the Free Software Foundation.
 */
package co.paralleluniverse.fibers.jdbc;

import co.paralleluniverse.common.util.CheckedCallable;
import co.paralleluniverse.fibers.Suspendable;
import com.google.common.util.concurrent.ListeningExecutorService;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * @author eitan
 */
class FiberConnection implements Connection {
    private final Connection conn;
    private final ListeningExecutorService executor;

    FiberConnection(Connection conn, ListeningExecutorService exec) {
        this.conn = conn;
        this.executor = exec;
    }

    @Suspendable
    @Override
    public Statement createStatement() throws SQLException {
        final Statement statement = JDBCFiberAsync.exec(executor, new CheckedCallable<Statement, SQLException>() {
            @Override
            public Statement call() throws SQLException {
                return conn.createStatement();
            }
        });
        return new FiberStatement(statement, executor);
    }
    
    @Suspendable
    @Override
    public PreparedStatement prepareStatement(final String sql) throws SQLException {
        final PreparedStatement prepareStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<PreparedStatement, SQLException>() {
            @Override
            public PreparedStatement call() throws SQLException {
                return conn.prepareCall(sql);
            }
        });
        return new FiberPreparedStatement(prepareStatement, executor);
    }

    @Suspendable
    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        final PreparedStatement prepareStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<PreparedStatement, SQLException>() {
            @Override
            public PreparedStatement call() throws SQLException {
                return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
            }
        });
        return new FiberPreparedStatement(prepareStatement, executor);
    }

    @Suspendable
    @Override
    public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
        final PreparedStatement prepareStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<PreparedStatement, SQLException>() {
            @Override
            public PreparedStatement call() throws SQLException {
                return conn.prepareStatement(sql, autoGeneratedKeys);
            }
        });
        return new FiberPreparedStatement(prepareStatement, executor);
    }

    @Suspendable
    @Override
    public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
        final PreparedStatement prepareStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<PreparedStatement, SQLException>() {
            @Override
            public PreparedStatement call() throws SQLException {
                return conn.prepareStatement(sql, columnIndexes);
            }
        });
        return new FiberPreparedStatement(prepareStatement, executor);
    }

    @Suspendable
    @Override
    public PreparedStatement prepareStatement(final String sql, final String[] columnNames) throws SQLException {
        final PreparedStatement prepareStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<PreparedStatement, SQLException>() {
            @Override
            public PreparedStatement call() throws SQLException {
                return conn.prepareStatement(sql, columnNames);
            }
        });
        return new FiberPreparedStatement(prepareStatement, executor);
    }

    @Suspendable
    @Override
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        final CallableStatement callableStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<CallableStatement, SQLException>() {
            @Override
            public CallableStatement call() throws SQLException {
                return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
            }
        });
        return new FiberCallableStatement(callableStatement, executor);
    }

    @Suspendable
    @Override
    public CallableStatement prepareCall(final String sql) throws SQLException {
        final CallableStatement callableStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<CallableStatement, SQLException>() {
            @Override
            public CallableStatement call() throws SQLException {
                return conn.prepareCall(sql);
            }
        });
        return new FiberCallableStatement(callableStatement, executor);
    }

    @Suspendable
    @Override
    public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        final CallableStatement callableStatement = JDBCFiberAsync.exec(executor, new CheckedCallable<CallableStatement, SQLException>() {
            @Override
            public CallableStatement call() throws SQLException {
                return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
            }
        });
        return new FiberCallableStatement(callableStatement, executor);
    }

    @Suspendable
    @Override
    public String nativeSQL(final String sql) throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<String, SQLException>() {
            @Override
            public String call() throws SQLException {
                return conn.nativeSQL(sql);
            }
        });
    }

    @Suspendable
    @Override
    public void setAutoCommit(final boolean autoCommit) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setAutoCommit(autoCommit);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public boolean getAutoCommit() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Boolean, SQLException>() {
            @Override
            public Boolean call() throws SQLException {
                return conn.getAutoCommit();
            }
        });
    }

    @Suspendable
    @Override
    public void commit() throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.commit();
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public void rollback() throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.rollback();
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public void close() throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.close();
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public boolean isClosed() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Boolean, SQLException>() {
            @Override
            public Boolean call() throws SQLException {
                return conn.isClosed();
            }
        });
    }

    @Suspendable
    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<DatabaseMetaData, SQLException>() {
            @Override
            public DatabaseMetaData call() throws SQLException {
                return conn.getMetaData();
            }
        });
    }

    @Suspendable
    @Override
    public void setReadOnly(final boolean readOnly) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setReadOnly(readOnly);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public boolean isReadOnly() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Boolean, SQLException>() {
            @Override
            public Boolean call() throws SQLException {
                return conn.isReadOnly();
            }
        });
    }

    @Suspendable
    @Override
    public void setCatalog(final String catalog) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setCatalog(catalog);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public String getCatalog() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<String, SQLException>() {
            @Override
            public String call() throws SQLException {
                return conn.getCatalog();
            }
        });
    }

    @Suspendable
    @Override
    public void setTransactionIsolation(final int level) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setTransactionIsolation(level);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public int getTransactionIsolation() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Integer, SQLException>() {
            @Override
            public Integer call() throws SQLException {
                return conn.getTransactionIsolation();
            }
        });
    }

    @Suspendable
    @Override
    public SQLWarning getWarnings() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<SQLWarning, SQLException>() {
            @Override
            public SQLWarning call() throws SQLException {
                return conn.getWarnings();
            }
        });
    }

    @Suspendable
    @Override
    public void clearWarnings() throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.clearWarnings();
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public FiberStatement createStatement(final int resultSetType, final int resultSetConcurrency) throws SQLException {
        final Statement statement = JDBCFiberAsync.exec(executor, new CheckedCallable<Statement, SQLException>() {
            @Override
            public Statement call() throws SQLException {
                return conn.createStatement(resultSetType, resultSetConcurrency);
            }
        });
        return new FiberStatement(statement, executor);
    }

    @Suspendable
    @Override
    public FiberPreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        final PreparedStatement stmt = JDBCFiberAsync.exec(executor, new CheckedCallable<PreparedStatement, SQLException>() {
            @Override
            public PreparedStatement call() throws SQLException {
                return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
            }
        });
        return new FiberPreparedStatement(stmt, executor);
    }

    @Suspendable
    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable< Map<String, Class<?>>, SQLException>() {
            @Override
            public Map<String, Class<?>> call() throws SQLException {
                return conn.getTypeMap();
            }
        });
    }

    @Suspendable
    @Override
    public void setTypeMap(final Map<String, Class<?>> map) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setTypeMap(map);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public void setHoldability(final int holdability) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setHoldability(holdability);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public int getHoldability() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Integer, SQLException>() {
            @Override
            public Integer call() throws SQLException {
                return conn.getHoldability();
            }
        });
    }

    @Suspendable
    @Override
    public Savepoint setSavepoint() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Savepoint, SQLException>() {
            @Override
            public Savepoint call() throws SQLException {
                return conn.setSavepoint();
            }
        });
    }

    @Suspendable
    @Override
    public Savepoint setSavepoint(final String name) throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Savepoint, SQLException>() {
            @Override
            public Savepoint call() throws SQLException {
                return conn.setSavepoint(name);
            }
        });
    }

    @Suspendable
    @Override
    public void rollback(final Savepoint savepoint) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.rollback(savepoint);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public void releaseSavepoint(final Savepoint savepoint) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.releaseSavepoint(savepoint);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public Statement createStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        final Statement statement = JDBCFiberAsync.exec(executor, new CheckedCallable<Statement, SQLException>() {
            @Override
            public Statement call() throws SQLException {
                return conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
            }
        });
        return new FiberStatement(statement, executor);
    }

    @Suspendable
    @Override
    public Clob createClob() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Clob, SQLException>() {
            @Override
            public Clob call() throws SQLException {
                return conn.createClob();
            }
        });
    }

    @Suspendable
    @Override
    public Blob createBlob() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Blob, SQLException>() {
            @Override
            public Blob call() throws SQLException {
                return conn.createBlob();
            }
        });
    }

    @Suspendable
    @Override
    public NClob createNClob() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<NClob, SQLException>() {
            @Override
            public NClob call() throws SQLException {
                return conn.createNClob();
            }
        });
    }

    @Suspendable
    @Override
    public SQLXML createSQLXML() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<SQLXML, SQLException>() {
            @Override
            public SQLXML call() throws SQLException {
                return conn.createSQLXML();
            }
        });
    }

    @Suspendable
    @Override
    public boolean isValid(final int timeout) throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Boolean, SQLException>() {
            @Override
            public Boolean call() throws SQLException {
                return conn.isValid(timeout);
            }
        });
    }

    @Suspendable
    @Override
    public void setClientInfo(final String name, final String value) throws SQLClientInfoException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLClientInfoException>() {
            @Override
            public Void call() throws SQLClientInfoException {
                conn.setClientInfo(name, value);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public void setClientInfo(final Properties properties) throws SQLClientInfoException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLClientInfoException>() {
            @Override
            public Void call() throws SQLClientInfoException {
                conn.setClientInfo(properties);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public String getClientInfo(final String name) throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<String, SQLException>() {
            @Override
            public String call() throws SQLException {
                return conn.getClientInfo(name);
            }
        });
    }

    @Suspendable
    @Override
    public Properties getClientInfo() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Properties, SQLException>() {
            @Override
            public Properties call() throws SQLException {
                return conn.getClientInfo();
            }
        });
    }

    @Suspendable
    @Override
    public Array createArrayOf(final String typeName, final Object[] elements) throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Array, SQLException>() {
            @Override
            public Array call() throws SQLException {
                return conn.createArrayOf(typeName, elements);
            }
        });
    }

    @Suspendable
    @Override
    public Struct createStruct(final String typeName, final Object[] attributes) throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Struct, SQLException>() {
            @Override
            public Struct call() throws SQLException {
                return conn.createStruct(typeName, attributes);
            }
        });
    }

    @Suspendable
    @Override
    public void setSchema(final String schema) throws SQLException {
        JDBCFiberAsync.exec(executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setSchema(schema);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public String getSchema() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<String, SQLException>() {
            @Override
            public String call() throws SQLException {
                return conn.getSchema();
            }
        });
    }

    @Suspendable
    @Override
    public void abort(final Executor executor) throws SQLException {
        JDBCFiberAsync.exec(this.executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.abort(executor);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public void setNetworkTimeout(final Executor executor, final int milliseconds) throws SQLException {
        JDBCFiberAsync.exec(this.executor, new CheckedCallable<Void, SQLException>() {
            @Override
            public Void call() throws SQLException {
                conn.setNetworkTimeout(executor, milliseconds);
                return null;
            }
        });
    }

    @Suspendable
    @Override
    public int getNetworkTimeout() throws SQLException {
        return JDBCFiberAsync.exec(executor, new CheckedCallable<Integer, SQLException>() {
            @Override
            public Integer call() throws SQLException {
                return conn.getNetworkTimeout();
            }
        });
    }

    @Override
    public <T> T unwrap(final Class<T> iface) throws SQLException {
        return conn.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(final Class<?> iface) throws SQLException {
        return conn.isWrapperFor(iface);
    }

    @Override
    public int hashCode() {
        return conn.hashCode();
    }

    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass")
    @Override
    public boolean equals(Object obj) {
        return conn.equals(obj);
    }

    @Override
    public String toString() {
        return conn.toString();
    }
}
