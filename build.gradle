subprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.7'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "0.2.0-SNAPSHOT"
    status              = "integration"
    description         = "Fibers services for web"
    ext.url             = "http://puniverse.github.com/comsat"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName1    = "The GNU Lesser General Public License, version 3"
    ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
    ext.licenseName2    = "Eclipse Public License - v 1.0"
    ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/comsat"
    ext.scmConnection   = "https://github.com/puniverse/comsat.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    ext.quasarVer       = "0.6.0-SNAPSHOT"

    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        sonatypeUsername = ""
        sonatypePassword = ""
    }
    if (!project.hasProperty('mainClass')) { // must use project.hasProperty() rather than hasProperty in subprojects (gradle bug)
        ext.mainClass = ''
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/releases" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://maven.java.net/content/repositories/snapshots' }
    }

    configurations {
        quasar
        provided
        srcFiles
        markdownDoclet
    }
    
    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            force "com.google.guava:guava:17.0"
            force "org.ow2.asm:asm:5.0.3"
            force "org.slf4j:slf4j-api:1.7.7"
            force "log4j:log4j:1.2.17"
            force "junit:junit:4.11"
            force "org.apache.httpcomponents:httpcore:4.3.2"
            force 'com.codahale.metrics:metrics-core:3.0.2'
            force 'javax.servlet:javax.servlet-api:3.0.1' 
        }
    }

    dependencies {
        quasar "co.paralleluniverse:quasar-core:$quasarVer" 
        testCompile group: 'junit', name: 'junit', version: '4.10'
        provided "co.paralleluniverse:quasar-core:$quasarVer"
        markdownDoclet "ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1"
    }
    
    sourceSets {
        main.compileClasspath = main.compileClasspath + configurations.provided
        main.runtimeClasspath = main.runtimeClasspath + configurations.provided
        test.compileClasspath = test.compileClasspath + configurations.provided
        test.runtimeClasspath = test.runtimeClasspath + configurations.provided
    }

    defaultTasks 'install'

    classes {
        doFirst{
            println "Excuting scanSuspendables..."
            ant.taskdef(name:'scanSuspendables', 
                classname:'co.paralleluniverse.fibers.instrument.SuspendablesScanner', 
                classpath: "build/classes/main:${configurations.provided.asPath}:${configurations.runtime.asPath}")
            ant.scanSuspendables(outputFile:"$sourceSets.main.output.resourcesDir/META-INF/suspendable-supers",
                suspendablesFile: "$sourceSets.main.output.resourcesDir/META-INF/suspendables"
            ) {
                fileset(dir: sourceSets.main.output.classesDir)
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    javadoc {
        options {
            docletpath = configurations.markdownDoclet.files.asType(List)
            doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
            addStringOption("parse-timeout", "10")
            // stylesheetFile = rootProject.file('./baselib/javadoc.css')
            links = ['http://docs.oracle.com/javaee/7/api/',
                'http://docs.oracle.com/javase/7/docs/api/',
                'http://puniverse.github.io/quasar/javadoc/',
                'http://docs.guava-libraries.googlecode.com/git-history/v17.0/javadoc/',
                'http://docs.oracle.com/javaee/7/api/',
                'http://jersey.java.net/apidocs/latest/jersey/']
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    } 

    ///////// Publish Artifacts 
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(
                    url: (isReleaseVersion ? 
	                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" : 
	                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                    // User and Password are taken from ~/.gradle/gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } 
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    } 
                    licenses {
                        license {
                            name project.licenseName1
                            url project.licenseUrl1
                            distribution 'repo'
                        }
                        license {
                            name project.licenseName2
                            url project.licenseUrl2
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'eitan'
                            name 'Eitan Yarden'
                        }
                    }
                }
            }
        }
    }	

    // Adds license header on each java file. gradle licenseMain for check or licenseFormatMain to apply
    apply plugin: 'license'
    license {
        header rootProject.file('LICENSE')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        skipExistingHeaders true
        mapping('java','SLASHSTAR_STYLE')
    }
    
    tasks.withType(Test) {
        jvmArgs "-javaagent:${configurations.quasar.iterator().next()}" // =v, =d
        systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
    }
   
}
defaultTasks 'install'

// needed to the license plugin
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0'
    }
}    


//project(':comsat-actors-netty') {
//    dependencies {
//        compile 'org.webbitserver:webbit:0.4.15'
//        compile project (':comsat-actors-api')
//    }
//}

//project(':comsat-actors-undertow') {
//    dependencies {
//        compile 'io.undertow:undertow-core:1.0.6.Final'
//        compile project (':comsat-actors-api')
//    }
//}
 
// Needed for @inheritDoc annotations
project (':comsat-actors-api') {    
    dependencies {
        srcFiles 'javax.ws.rs:javax.ws.rs-api:2.0:sources'
        srcFiles 'javax.servlet:javax.servlet-api:3.0.1:sources' 
        srcFiles 'org.apache.httpcomponents:httpasyncclient:4.0.1:sources'
        srcFiles 'org.apache.httpcomponents:httpclient:4.3.2:sources'
        srcFiles 'org.apache.httpcomponents:httpcore:4.3.2:sources'
    }
}

task javadoc(type: Javadoc) {
    title = "Comsat ${project(':comsat-actors-api').version}"
    destinationDir = file("docs/javadoc")
//    project(':comsat-jax-rs-client').sourceSets.main.allJava
//    println subprojects.configurations.srcFiles.files.flatten().join(':')
    source = files(subprojects.collect { project -> project.sourceSets.main.allJava })
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    options {
        addStringOption('sourcepath', subprojects.configurations.srcFiles.files.flatten().join(':'))
        docletpath = project(':comsat-actors-api').configurations.markdownDoclet.files.asType(List)
        doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
        addStringOption("parse-timeout", "10")
        // stylesheetFile = rootProject.file('./baselib/javadoc.css')
        // links are needed for javadoc external links. (eg. instead of javax.sql.DataSource link to DataSource)
        links = ['http://docs.oracle.com/javaee/7/api/',
                'http://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/',
                'http://hc.apache.org/httpcomponents-asyncclient-4.0.x/httpasyncclient/apidocs/',
                'http://hc.apache.org/httpcomponents-core-4.3.x/httpcore/apidocs/',
                'http://docs.oracle.com/javase/7/docs/api/',
                'http://puniverse.github.io/quasar/javadoc/',
                'http://docs.guava-libraries.googlecode.com/git-history/v17.0/javadoc/',
                'http://docs.oracle.com/javaee/7/api/',
                'http://jersey.java.net/apidocs/latest/jersey/']
    }
    excludes = [
        "org/glassfish/jersey/server/internal/**",
        "co/paralleluniverse/comsat/webactors/servlet/WebActorEndpoint.java",
        "co/paralleluniverse/comsat/webactors/servlet/WebActorInitializer.java",
        "co/paralleluniverse/comsat/webactors/servlet/WebActorServlet.java",
    ]
}

task clean(dependsOn: subprojects.clean) << {
    delete 'docs/javadoc'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
