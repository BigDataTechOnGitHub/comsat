subprojects {

    apply plugin: 'java'

    sourceCompatibility = '1.7'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "0.1.0-SNAPSHOT"
    status              = "integration"
    description         = "Fibers services for web"
    ext.url             = "http://puniverse.github.com/comsat"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName1    = "The GNU Lesser General Public License, version 3"
    ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
    ext.licenseName2    = "Eclipse Public License - v 1.0"
    ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/comsat"
    ext.scmConnection   = "https://github.com/puniverse/comsat.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        sonatypeUsername = ""
        sonatypePassword = ""
    }
    if (!project.hasProperty('mainClass')) { // must use project.hasProperty() rather than hasProperty in subprojects (gradle bug)
        ext.mainClass = ''
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            force "com.google.guava:guava:15.0"
            force "org.ow2.asm:asm:4.2"
            force "org.slf4j:slf4j-api:1.7.5"
            force "log4j:log4j:1.2.16"
            force "junit:junit:4.10"
            //            force "org.apache.httpcomponents:httpcore:4.3"
            //            force "org.apache.httpcomponents:httpclient:4.3-beta2"
        }
    }

    configurations {
        srcFiles
        markdownDoclet
    }
    
    dependencies {
        compile 'co.paralleluniverse:quasar-core:0.4.0-SNAPSHOT'
        markdownDoclet "ch.raffael.pegdown-doclet:pegdown-doclet:1.1.1"
    }

    defaultTasks 'install'

    task scanSuspendables(type: JavaExec, dependsOn: classes) { // used to run SuspendableScanner
        main = "co.paralleluniverse.fibers.instrument.SuspendablesScanner"
        classpath = sourceSets.main.runtimeClasspath
        args = ["co.paralleluniverse.fibers"]
    }
    tasks.jar.dependsOn scanSuspendables

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    javadoc {
        options {
            // docletpath = project(':comsat-actors-api').configurations.markdownDoclet.files.asType(List)
            // doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
            // addStringOption("parse-timeout", "10")
            // stylesheetFile = rootProject.file('./baselib/javadoc.css')
            links = ['http://docs.oracle.com/javaee/7/api/',
                'http://docs.oracle.com/javase/7/docs/api/',
                'http://puniverse.github.io/quasar/javadoc/',
                'http://docs.guava-libraries.googlecode.com/git-history/v15.0/javadoc/',
                'http://docs.oracle.com/javaee/7/api/',
                'http://jersey.java.net/apidocs/latest/jersey/']
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    } 

    ///////// Publish Artifacts 
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(
                    url: (isReleaseVersion ? 
	                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" : 
	                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                    // User and Password are taken from ~/.gradle/gradle.properties
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } 
                pom.project {
                    name project.name
                    packaging 'jar'
                    description project.description
                    url project.url
                    scm {
                        url project.scmUrl
                        connection project.scmConnection
                        developerConnection project.scmConnection
                    } 
                    licenses {
                        license {
                            name project.licenseName1
                            url project.licenseUrl1
                            distribution 'repo'
                        }
                        license {
                            name project.licenseName2
                            url project.licenseUrl2
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'eitan'
                            name 'Eitan Yarden'
                        }
                    }
                }
            }
        }
    }	

    // Adds license header on each java file. gradle licenseMain for check or licenseFormatMain to apply
    apply plugin: 'license'
    license {
        header rootProject.file('LICENSE')
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        strictCheck true
        skipExistingHeaders true
        mapping('java','SLASHSTAR_STYLE')
    }
   
}
defaultTasks 'install'

// needed to the license plugin
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.5.0'
    }
}    

project (':comsat-jdbc') {
    dependencies {
        compile 'com.google.guava:guava:15.0'
    }
}

project (':comsat-jax-rs-client') {
    dependencies {
        compile 'javax.ws.rs:javax.ws.rs-api:2.0'
        compile 'co.paralleluniverse:jetty-connector:0.1.0-SNAPSHOT'
        srcFiles 'javax.ws.rs:javax.ws.rs-api:2.0:sources'
    }
    
}

//project (':comsat-httpclient') {
//    dependencies {
//        compile 'org.apache.httpcomponents:httpcore:4.3'
//        compile 'org.apache.httpcomponents:httpclient:4.3-beta2'
//        compile 'org.apache.httpcomponents:httpasyncclient:4.0-beta4'
//    }
//}

project (':comsat-servlet') {
    dependencies {
        compile 'javax.servlet:javax.servlet-api:3.0.1'            
    }
}
project (':comsat-jersey-server') {
    dependencies {
        compile project(':comsat-servlet')
        compile 'org.sonatype.sisu.inject:cglib:3.0' // instead of old cglib in jersey
        compile ('org.glassfish.jersey.containers:jersey-container-servlet:2.3' ) {
            exclude group: 'org.glassfish.hk2.external', module: 'asm-all-repackaged' 
            exclude group: 'org.glassfish.hk2.external', module: 'cglib' 
        }
        compile ('org.glassfish.jersey.core:jersey-client:2.3') {
            exclude group: 'org.glassfish.hk2.external', module: 'asm-all-repackaged' 
            exclude group: 'org.glassfish.hk2.external', module: 'cglib' 
        }
    }
}

project (':comsat-actors-api') {    
    dependencies {
        compile  'co.paralleluniverse:quasar-actors:0.4.0-SNAPSHOT'
    }
}

project (':comsat-actors-servlet') {
    dependencies {
        compile project (':comsat-actors-api')
        compile 'javax.websocket:javax.websocket-api:1.0'
        compile 'javax.servlet:javax.servlet-api:3.1.0' 
        srcFiles 'javax.servlet:javax.servlet-api:3.1.0:sources' 
    }
}
project(':comsat-actors-netty') {
    dependencies {
        compile 'org.webbitserver:webbit:0.4.15'
        compile project (':comsat-actors-api')
    }
}
project(':comsat-actors-undertow') {
    dependencies {
        compile 'io.undertow:undertow-core:1.0.0.Beta18'
        compile project (':comsat-actors-api')
    }
}
project(':comsat-tomcat-loader') {
    dependencies {
        compile 'org.apache.tomcat.embed:tomcat-embed-core:8.0.0-RC3'
    }
    jar {
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    } 
}
project(':comsat-jetty-loader') {
    dependencies {
        compile 'org.eclipse.jetty:jetty-webapp:9.1.0.RC0'
    }
    jar {
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    } 
}

task javadoc(type: Javadoc) {
    title = "Comsat ${project(':comsat-actors-api').version}"
    destinationDir = file("docs/javadoc")
    source = 
        project(':comsat-actors-api').sourceSets.main.allJava +
        project(':comsat-servlet').sourceSets.main.allJava +
        project(':comsat-jdbc').sourceSets.main.allJava + 
        project(':comsat-jersey-server').sourceSets.main.allJava +
        project(':comsat-jax-rs-client').sourceSets.main.allJava
    
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    options {
        addStringOption('sourcepath', subprojects.configurations.srcFiles.files.flatten().join(':'))
        links = ['http://docs.oracle.com/javaee/7/api/',
                'http://docs.oracle.com/javase/7/docs/api/',
                'http://puniverse.github.io/quasar/javadoc/',
                'http://docs.guava-libraries.googlecode.com/git-history/v15.0/javadoc/',
                'http://docs.oracle.com/javaee/7/api/',
                'http://jersey.java.net/apidocs/latest/jersey/']
        //        docletpath = project(':comsat-actors-api').configurations.markdownDoclet.files.asType(List)
        //        doclet = 'ch.raffael.doclets.pegdown.PegdownDoclet'
        //        addStringOption("parse-timeout", "10")
        // stylesheetFile = rootProject.file('./baselib/javadoc.css')
    }
    excludes = [
        "org/glassfish/jersey/server/internal/**"
    ]
}

task clean(dependsOn: subprojects.clean) << {
    delete 'docs/javadoc'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}